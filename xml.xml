<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="main.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<class>class <name>test</name> <block>{<private type="default">
</private><public>public:
	<function><type><name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{}</block></function><empty_stmt>;</empty_stmt>
	<function_decl><type><name>void</name></type> <name>test2</name><parameter_list>()</parameter_list>;</function_decl>
	<function><type><name>void</name></type> <name>test3</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function><empty_stmt>;</empty_stmt>
	<function_decl><type><name>void</name></type> <name>test4</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<function><type><name>void</name></type> <name><name>test</name><operator>::</operator><name>test2</name></name><parameter_list>()</parameter_list> <block>{}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>void</name></type> <name><name>test</name><operator>::</operator><name>test4</name></name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>main1</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>char</name></type></decl></param>,<param><decl><type><name>double</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>main2</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></param>)</parameter_list> 
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>main1</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>main1</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>main2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>main1</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>main2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>main1</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>,<param><decl><type><name>char</name></type> <name>c</name></decl></param>, <param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <block>{ <expr_stmt><expr><call><name>main2</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>main2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>main2</name><parameter_list>()</parameter_list> <block>{}</block></function>
</unit>
